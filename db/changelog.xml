<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.3.xsd">

    <!-- 
        Due to XML parsing behaviors, we need to escape certain characters. 
        Ensure that any special characters in your XML content are properly 
        escaped. For example, < should be represented as &lt;, > as &gt;, & as &amp;, etc.
        This does not apply if the sql is running from its own script, only if it runs in 
		this file.

        Additionally, liquibase struggles to use $$ and $body$ in both <sql> tags and .sql files. 
		To work around this, use the following: 
            $ will be '
            $BODY$ will be '
            ' will be ''
        See examples in code below. 
    -->
    <changeSet id="1" author="Carl" context="#19">
        <comment>Initial</comment>
        <sql>
            CREATE SCHEMA IF NOT EXISTS public;
        </sql>
        <sql>
            CREATE TABLE public.user_data (
                user_id SERIAL PRIMARY KEY,
                user_uuid UUID NOT NULL,
                auth0_id TEXT UNIQUE NOT NULL,
                full_name TEXT NOT NULL,
                first_name TEXT NULL,
                last_name TEXT NULL,
                nickname TEXT NOT NULL, 
                email TEXT NOT NULL,
                created_at TIMESTAMP NOT NULL,
                last_login TIMESTAMP,
                is_premium_member BOOLEAN NOT NULL,
                is_deleted BOOLEAN NOT NULL,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
            );

            CREATE TABLE public.inventory_item (
                inventory_item_id BIGSERIAL PRIMARY KEY,
                inventory_item_uuid UUID NOT NULL,
                name TEXT NOT NULL,
                description TEXT,
                sku TEXT,
                cost INTEGER, -- stored in pennies
                serial_number TEXT,
                purchase_date TIMESTAMP,
                supplier TEXT,
                brand TEXT,
                model TEXT,
                quantity INTEGER NOT NULL,
                reorder_quantity INTEGER, 
                location TEXT,
                expiration_date TIMESTAMP,
                category INTEGER,
                custom_package_uuid UUID,
                item_weight_g integer, -- weight is stored in grams 
                is_listed BOOLEAN NOT NULL,
                is_lot BOOLEAN NOT NULL,
                notes TEXT,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
            );

            CREATE TABLE public.business_inventory_item (
                inventory_item_id INTEGER, 
                business_id INTEGER,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL),
                PRIMARY KEY (inventory_item_id, business_id)
            );

            CREATE TABLE public.user_business (
                user_id INTEGER,
                business_id INTEGER,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL),
                PRIMARY KEY (user_id, business_id)
            );

            CREATE TABLE public.business (
                business_id SERIAL PRIMARY KEY,
				business_uuid UUID NOT NULL,
				business_owner_uuid UUID NOT NULL,
				business_fullname TEXT NOT NULL,
				business_display_name TEXT NOT NULL, 
				business_structure_type_id INT NOT NULL,
				country_code TEXT NOT NULL,
				business_industry TEXT NOT NULL,
				is_deleted BOOLEAN NOT NULL,
				sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
            );
			
			CREATE TABLE public.business_structure_type (
				bst_id SERIAL PRIMARY KEY,
				bst_name TEXT NOT NULL
			);

            CREATE TABLE public.custom_package (
                custom_package_id BIGSERIAL PRIMARY KEY,
                custom_package_uuid UUID NOT NULL,
                name TEXT NOT NULL, 
                weight_g INTEGER, -- weight is stored in grams
                width_cm INTEGER, -- package dimensions are stored in cm
                height_cm INTEGER, 
                length_cm INTEGER
            );

            CREATE TABLE public.role (
                role_id SERIAL PRIMARY KEY,
                role_name TEXT NOT NULL
            );

            CREATE TABLE public.permission (
                permission_id SERIAL PRIMARY KEY,
                permission_name TEXT NOT NULL
            );

            CREATE TABLE public.role_permission (
                role_id INTEGER,
                permission_id INTEGER,
                PRIMARY KEY (role_id, permission_id)   
            );

            CREATE TABLE public.user_role (
                user_id INTEGER,
                role_id INTEGER,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL), 
                PRIMARY KEY (user_id, role_id)
            );
        </sql>

        <sql>
            INSERT INTO public.permission (permission_name)
            VALUES ('create:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('get:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('delete:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('update:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('create:inventory-item');
            INSERT INTO public.permission (permission_name)
            VALUES ('get:inventory-item');
            INSERT INTO public.permission (permission_name)
            VALUES ('delete:inventory-item');
            INSERT INTO public.permission (permission_name)
            VALUES ('update:inventory-item');
			INSERT INTO public.permission (permission_name)
			VALUES ('create:business');
			INSERT INTO public.permission (permission_name)
			VALUES ('get:business');
			INSERT INTO public.permission (permission_name)
			VALUES ('delete:business');
			INSERT INTO public.permission (permission_name)
			VALUES ('update:business');

            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 1);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 2);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 3);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 4);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 5);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 6);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 7);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 8);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 9);
			INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 10);
			INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 11);
			INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 12);

            INSERT INTO public.user_data (user_uuid, auth0_id, full_name, first_name, last_name, nickname, email, created_at, last_login, is_premium_member, is_deleted)
            VALUES ('e7bd758c-e8bb-45f0-ab4d-e7a331b60729','auth0|65fe478e4e87f7a8c0a6684a', 'Carl Ryckeley', 'Carl', 'Ryckeley','Carl The Great', 'bm-app@carlthegreat.com', NOW(), NOW(), False, False);

            INSERT INTO public.business (business_uuid, business_owner_uuid, business_fullname, business_display_name, business_structure_type_id, country_code, business_industry, is_deleted)
			VALUES ('b492be78-9a2f-4899-b516-79963418b985', 'e7bd758c-e8bb-45f0-ab4d-e7a331b60729', 'Carl Ryckeley Repairs', 'CR Repairs', 6, 'US', 'Electronic and Computer Repair', False);

            INSERT INTO public.user_business (user_id, business_id)
            VALUES (1, 1);

            INSERT INTO public.role (role_name)
            VALUES ('owner');

            INSERT INTO public.user_role (user_id, role_id)
            VALUES (1, 1);
			
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Sole proprietorship');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Partnership');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Corporation');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('S corporation');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Limited liability company');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Not listed');
        </sql>
    </changeSet>

    <changeSet id="2" author="Carl" context="#19">
        <comment>Create history tables and audit triggers</comment>
            <sqlFile dbms="postgresql"
            encoding="UTF-8"
            path="audit.sql"
            relativeToChangelogFile="true"
            splitStatements="true"
            stripComments="true"
            />
        <sql>
            SELECT audit.audit_table('user_data');
            SELECT audit.audit_table('business');
        </sql>
    </changeSet>

    <changeSet id="3" author="Carl" context="#19">
        <sqlFile dbms="postgresql"
            encoding="UTF-8"
            path="versioning_function.sql"
            relativeToChangelogFile="true"
            splitStatements="true"
            stripComments="true"
            />
        <sql>
            CREATE TABLE audit.business_history (LIKE public.business);
            CREATE TABLE audit.business_inventory_item_history (LIKE public.business_inventory_item);
            CREATE TABLE audit.inventory_item_history (LIKE public.inventory_item);
            CREATE TABLE audit.user_data_history (LIKE public.user_data);
            CREATE TABLE audit.user_business_history (LIKE public.user_business);
            CREATE TABLE audit.user_role_history (LIKE public.user_role);

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.business
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.business_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.business_inventory_item
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.business_inventory_item_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.inventory_item
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.inventory_item_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.user_data
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.user_data_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.user_business
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.user_business_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.user_role
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.user_role_history', true
            );
        </sql>
    </changeSet>
	<changeSet id="4" author="Noah" context="#23">
		<comment>Create tables for sales orders, line items, customers, and addresses</comment>
		<sql>
			CREATE TABLE public.sales_order (
				sales_order_id SERIAL PRIMARY KEY,
				sales_order_uuid UUID NOT NULL,
				reference_number TEXT NOT NULL,
				sales_order_customer_uuid UUID,
				business_uuid UUID NOT NULL,
				created_at TIMESTAMP NOT NULL,
				delivery_method TEXT,
				is_tax_inclusive BOOLEAN NOT NULL,
				notes TEXT,
				terms TEXT,
				shipping_charge INTEGER,
				adjustment INTEGER,
				adjustment_description TEXT,
				billing_address_id INT NOT NULL,
				shipping_address_id INT NOT NULL,
				sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
			);

			CREATE TABLE public.sales_order_line_item (
				line_item_id BIGSERIAL PRIMARY KEY,
				line_item_uuid UUID NOT NULL,
				inventory_item_uuid UUID NOT NULL,
				sales_order_uuid UUID NOT NULL,
				order_number INTEGER NOT NULL,
				name TEXT NOT NULL,
				cost INTEGER NOT NULL,
				description TEXT,
				quantity INTEGER NOT NULL,
				sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
			);
			
			CREATE TABLE public.customer (
				customer_id SERIAL PRIMARY KEY,
				customer_uuid UUID NOT NULL,
				full_name TEXT NOT NULL,
				first_name TEXT NOT NULL,
				last_name TEXT NOT NULL,
				company TEXT,
				phone_number TEXT,
				email TEXT,
				billing_address_id INT NOT NULL,
				shipping_address_id INT NOT NULL,
				is_delete BOOLEAN NOT NULL,
				sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
			);

			CREATE TABLE public.address (
				address_id SERIAL PRIMARY KEY,
				street_one TEXT NOT NULL,
				street_two TEXT,
				city TEXT NOT NULL,
				state TEXT NOT NULL,
				postal_code TEXT NOT NULL,
				country TEXT NOT NULL,
				sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
			);
			
			CREATE TABLE public.sales_order_address (
				sales_order_address_id INTEGER NOT NULL,
				address_id INTEGER NOT NULL,
				address_type SMALLINT 
			);

			CREATE TABLE public.customer_address (
				customer_address_id INTEGER NOT NULL,
				address_id INTEGER NOT NULL,
				address_type SMALLINT 
			);
		</sql>
		
		<comment>Create test data for sales orders, line items, customers, and addresses</comment>
		<sql>
			INSERT INTO public.sales_order (sales_order_uuid, reference_number, sales_order_customer_uuid, business_uuid, created_at, delivery_method, is_tax_inclusive, notes, terms, shipping_charge, adjustment, adjustment_description, billing_address_id, shipping_address_id)
			VALUES ('74a5e6e8-9f3d-44e8-973b-92e2b91eaf8b', '240511B', '63d4f1b4-12c5-49d4-9e16-74b48e5a6db7', '835b9d9e-7c42-4eaf-93f7-2b29e94b6f8b', NOW(), 'UPS', FALSE, 'This note is a test.', 'These are my terms', 500, 0, 'Test description', 1, 1);

			INSERT INTO public.sales_order (sales_order_uuid, reference_number, sales_order_customer_uuid, business_uuid, created_at, delivery_method, is_tax_inclusive, notes, terms, shipping_charge, adjustment, adjustment_description, billing_address_id, shipping_address_id)
			VALUES ('b94d9b5c-4c3f-40e2-87c7-a34d5d7e4f9a', '450921D', '85f4e2a6-3a7e-40d6-8d9e-6a87e5b4f9b8', '73d5c2d4-5a2f-4eaf-b9f9-2e38e94a7f9c', NOW(), 'FedEx', TRUE, 'This is another test note.', 'These are different terms', 600, 1, 'Another test description', 2, 2);

			INSERT INTO public.sales_order (sales_order_uuid, reference_number, sales_order_customer_uuid, business_uuid, created_at, delivery_method, is_tax_inclusive, notes, terms, shipping_charge, adjustment, adjustment_description, billing_address_id, shipping_address_id)
			VALUES ('f84e1a2b-4d4f-40b8-87d7-b45f7d8e5a9a', '730731E', '6e3e9f5e-cae2-40de-8f15-c0f62d4f3ec1', '8d97d9e4-b614-4a95-8f7a-bb89624eab10', NOW(), 'DHL', FALSE, 'This is a different test note.', 'These are yet more terms', 700, 2, 'Yet another test description', 4, 3);

			INSERT INTO public.sales_order (sales_order_uuid, reference_number, sales_order_customer_uuid, business_uuid, created_at, delivery_method, is_tax_inclusive, notes, terms, shipping_charge, adjustment, adjustment_description, billing_address_id, shipping_address_id)
			VALUES ('21cd8e44-6e57-4329-8d65-fb7e29e408b4', '920841F', '44b21d8d-6f3a-4ae9-8243-1fc4e8d1b657', '3bdf5d58-3b92-4ea4-beb8-d55a5e8fbf99', NOW(), 'USPS', TRUE, 'This is yet another test note.', 'These are more different terms', 800, 3, 'Different test description', 5, 6);


			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('550e8400-e29b-41d4-a716-446655440000', '6fa459ea-ee8a-3ca4-894e-db77e160355e', '74a5e6e8-9f3d-44e8-973b-92e2b91eaf8b', 1, 'Sample Item 1', 200, 'Description for item 1', 5);

			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('19f8c600-47c2-4f9a-8e6d-b2f7e02364b0', 'a4a3c1b5-85a7-44e7-bf9f-82ebd7e98ff1', '74a5e6e8-9f3d-44e8-973b-92e2b91eaf8b', 2, 'Sample Item 2', 150, 'Description for item 2', 10);

			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('e9186b7e-8578-44c1-8b29-9a3b42e7f3e6', 'b706dd27-477e-4d5d-8462-3ed36cbe6d7d', 'b94d9b5c-4c3f-40e2-87c7-a34d5d7e4f9a', 1, 'Sample Item 3', 300, 'Description for item 3', 20);

			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('9b2e5df3-9155-4ba5-b5f5-08e3a7c08025', 'c2e2a6d1-237b-47d1-9b64-1d7a0e6274b0', 'b94d9b5c-4c3f-40e2-87c7-a34d5d7e4f9a', 2, 'Sample Item 4', 450, 'Description for item 4', 15);

			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('1c47128d-093f-48a1-b217-9b2b9f3a60b8', '17b1b4d6-10e4-4560-8a5d-e0dc9390e10d', 'f84e1a2b-4d4f-40b8-87d7-b45f7d8e5a9a', 1, 'Sample Item 5', 600, 'Description for item 5', 5);

			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('478b1c1c-4a62-4909-a4ea-6eaf83c3e4bb', '5dbf1b6e-d6b1-4d8a-9fa5-52bc3e1e5fb6', 'f84e1a2b-4d4f-40b8-87d7-b45f7d8e5a9a', 2, 'Sample Item 6', 750, 'Description for item 6', 12);

			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('01f3b9e5-d9f0-4f56-b7e2-3dc610adf6a3', '54e2f8a3-83d7-4b4e-9adf-98c9186b0c7a', '21cd8e44-6e57-4329-8d65-fb7e29e408b4', 1, 'Sample Item 7', 900, 'Description for item 7', 7);

			INSERT INTO public.sales_order_line_item (line_item_uuid, inventory_item_uuid, sales_order_uuid, order_number, name, cost, description, quantity)
			VALUES ('e5f3b1c4-45af-4ea2-a3be-fbc497c7f14e', '9d6e3a1b-12f5-4b83-b5e7-fb5a0d5f517b', '21cd8e44-6e57-4329-8d65-fb7e29e408b4', 2, 'Sample Item 8', 1050, 'Description for item 8', 22);


			INSERT INTO public.customer (customer_uuid, full_name, first_name, last_name, company, phone_number, email, billing_address_id, shipping_address_id, is_delete)
			VALUES ('8c2a71e5-bbf7-453b-919f-d3c6a16a2ef9', 'John Doe', 'John', 'Doe', 'Doe Enterprises', '+1 (123) 555-1234', 'john.doe@doeenterprises.com', 1, 1, FALSE);

			INSERT INTO public.customer (customer_uuid, full_name, first_name, last_name, company, phone_number, email, billing_address_id, shipping_address_id, is_delete)
			VALUES ('75f8e1b1-3d6b-4482-a5b8-4d6bce847ff1', 'Jane Smith', 'Jane', 'Smith', 'Smith Solutions', '+1 (456) 555-5678', 'jane.smith@smithsolutions.com', 2, 2, FALSE);

			INSERT INTO public.customer (customer_uuid, full_name, first_name, last_name, company, phone_number, email, billing_address_id, shipping_address_id, is_delete)
			VALUES ('3b1c9a5f-87f7-43c5-917c-6c4d2d3b1e6e', 'Alice Johnson', 'Alice', 'Johnson', NULL, '+1 (789) 555-8765', 'alice.johnson@example.com', 4, 3, FALSE);

			INSERT INTO public.customer (customer_uuid, full_name, first_name, last_name, company, phone_number, email, billing_address_id, shipping_address_id, is_delete)
			VALUES ('8d7a4b3c-5e7f-4892-a4e1-c5d2e3b7a8f9', 'Bob Brown', 'Bob', 'Brown', 'Brown and Co.', '+1 (321) 555-4321', 'bob.brown@brownco.com', 7, 8, FALSE);


			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('123 Main St', NULL, 'Springfield', 'IL', '62701', 'US');

			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('456 Elm St', NULL, 'Anytown', 'TX', '75001', 'US');

			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('555 Pine Blvd', 'P.O. Box 202', 'Seattle', 'IL', '98101', 'US');

			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('910 Birch Ln', NULL, 'Miami', 'FL', '33101', 'US');

			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('789 Oak Ave', 'P.O. Box 101', 'Lakeside', 'CA', '92040', 'US');

			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('321 Cedar Rd', NULL, 'Portland', 'OR', '97201', 'US');

			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('678 Maple Dr', NULL, 'Boulder', 'CO', '80302', 'US');

			INSERT INTO public.address (street_one, street_two, city, state, postal_code, country) 
			VALUES ('910 Birch Ln', NULL, 'Miami', 'FL', '33101', 'US');
			
			INSERT INTO public.sales_order_address (sales_order_address_id, address_id, address_type)
			VALUES (1, 1, NULL);
			INSERT INTO public.sales_order_address (sales_order_address_id, address_id, address_type)
			VALUES (2, 2, NULL);
			INSERT INTO public.sales_order_address (sales_order_address_id, address_id, address_type)
			VALUES (3, 3, NULL);
			INSERT INTO public.sales_order_address (sales_order_address_id, address_id, address_type)
			VALUES (4, 4, NULL);
			INSERT INTO public.sales_order_address (sales_order_address_id, address_id, address_type)
			VALUES (5, 5, NULL);
			INSERT INTO public.sales_order_address (sales_order_address_id, address_id, address_type)
			VALUES (6, 6, NULL);


			INSERT INTO public.customer_address (customer_address_id, address_id, address_type)
			VALUES (1, 1, NULL);
			INSERT INTO public.customer_address (customer_address_id, address_id, address_type)
			VALUES (2, 2, NULL);
			INSERT INTO public.customer_address (customer_address_id, address_id, address_type)
			VALUES (3, 3, NULL);
			INSERT INTO public.customer_address (customer_address_id, address_id, address_type)
			VALUES (4, 4, NULL);
			INSERT INTO public.customer_address (customer_address_id, address_id, address_type)
			VALUES (7, 7, NULL);
			INSERT INTO public.customer_address (customer_address_id, address_id, address_type)
			VALUES (8, 8, NULL);
		</sql>
		
		<comment>Create history tables and audit triggers</comment>
        <sql>
            SELECT audit.audit_table('sales_order');
            SELECT audit.audit_table('sales_order_line_item');
        </sql>
		
		<sqlFile dbms="postgresql"
            encoding="UTF-8"
            path="versioning_function.sql"
            relativeToChangelogFile="true"
            splitStatements="true"
            stripComments="true"
            />
        <sql>
			CREATE TABLE audit.sales_order_history (LIKE public.sales_order);
			CREATE TABLE audit.sales_order_line_item_history (LIKE public.sales_order_line_item);
			CREATE TABLE audit.customer_history (LIKE public.customer);
			CREATE TABLE audit.address_history (LIKE public.address);
			
			
			CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.sales_order
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.sales_order_history', true
            );
			
			CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.sales_order_line_item
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.sales_order_line_item_history', true
            );
			
			CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.customer
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.customer_history', true
            );
			
			CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.address
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.address_history', true
            );
		</sql>
	</changeSet>
</databaseChangeLog>
