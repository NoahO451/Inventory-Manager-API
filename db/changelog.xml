<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.3.xsd">

    <!-- 
        Due to XML parsing behaviors, we need to escape certain characters. 
        Ensure that any special characters in your XML content are properly 
        escaped. For example, < should be represented as &lt;, > as &gt;, & as &amp;, etc.
        This does not apply if the sql is running from its own script, only if it runs in 
		this file.

        Additionally, liquibase struggles to use $$ and $body$ in both <sql> tags and .sql files. 
		To work around this, use the following: 
            $ will be '
            $BODY$ will be '
            ' will be ''
        See examples in code below. 
    -->
    <changeSet id="1" author="Carl" context="#19">
        <comment>Initial</comment>
        <sql>
            CREATE SCHEMA IF NOT EXISTS public;
        </sql>
        <sql>
            CREATE TABLE public.user_data (
                user_id SERIAL PRIMARY KEY,
                user_uuid UUID NOT NULL,
                auth0_id TEXT UNIQUE NOT NULL,
                full_name TEXT NOT NULL,
                first_name TEXT NULL,
                last_name TEXT NULL,
                nickname TEXT NOT NULL, 
                email TEXT NOT NULL,
                created_at TIMESTAMP NOT NULL,
                last_login TIMESTAMP,
                is_premium_member BOOLEAN NOT NULL,
                is_deleted BOOLEAN NOT NULL,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
            );

            CREATE TABLE public.inventory_item (
                inventory_item_id BIGSERIAL PRIMARY KEY,
                inventory_item_uuid UUID NOT NULL,
                name TEXT NOT NULL,
                description TEXT,
                sku TEXT,
                cost INTEGER, -- stored in pennies
                serial_number TEXT,
                purchase_date TIMESTAMP,
                supplier TEXT,
                brand TEXT,
                model TEXT,
                quantity INTEGER NOT NULL,
                reorder_quantity INTEGER, 
                location TEXT,
                expiration_date TIMESTAMP,
                category INTEGER,
                custom_package_uuid UUID,
                item_weight_g integer, -- weight is stored in grams 
                is_listed BOOLEAN NOT NULL,
                is_lot BOOLEAN NOT NULL,
                notes TEXT,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
            );

            CREATE TABLE public.business_inventory_item (
                inventory_item_id INTEGER, 
                business_id INTEGER,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL),
                PRIMARY KEY (inventory_item_id, business_id)
            );

            CREATE TABLE public.user_business (
                user_id INTEGER,
                business_id INTEGER,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL),
                PRIMARY KEY (user_id, business_id)
            );

            CREATE TABLE public.business (
                business_id SERIAL PRIMARY KEY,
				business_uuid UUID NOT NULL,
				business_owner_uuid UUID NOT NULL,
				business_fullname TEXT NOT NULL,
				business_display_name TEXT NOT NULL, 
				business_structure_type_id INT NOT NULL,
				country_code TEXT NOT NULL,
				business_industry TEXT NOT NULL,
				is_deleted BOOLEAN NOT NULL,
				sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL)
            );
			
			CREATE TABLE public.business_structure_type (
				bst_id SERIAL PRIMARY KEY,
				bst_name TEXT NOT NULL
			);

            CREATE TABLE public.custom_package (
                custom_package_id BIGSERIAL PRIMARY KEY,
                custom_package_uuid UUID NOT NULL,
                name TEXT NOT NULL, 
                weight_g INTEGER, -- weight is stored in grams
                width_cm INTEGER, -- package dimensions are stored in cm
                height_cm INTEGER, 
                length_cm INTEGER
            );

            CREATE TABLE public.role (
                role_id SERIAL PRIMARY KEY,
                role_name TEXT NOT NULL
            );

            CREATE TABLE public.permission (
                permission_id SERIAL PRIMARY KEY,
                permission_name TEXT NOT NULL
            );

            CREATE TABLE public.role_permission (
                role_id INTEGER,
                permission_id INTEGER,
                PRIMARY KEY (role_id, permission_id)   
            );

            CREATE TABLE public.user_role (
                user_id INTEGER,
                role_id INTEGER,
                sys_period tstzrange NOT NULL DEFAULT tstzrange(current_timestamp, NULL), 
                PRIMARY KEY (user_id, role_id)
            );
        </sql>

        <sql>
            INSERT INTO public.permission (permission_name)
            VALUES ('create:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('get:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('delete:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('update:user');
            INSERT INTO public.permission (permission_name)
            VALUES ('create:inventory-item');
            INSERT INTO public.permission (permission_name)
            VALUES ('get:inventory-item');
            INSERT INTO public.permission (permission_name)
            VALUES ('delete:inventory-item');
            INSERT INTO public.permission (permission_name)
            VALUES ('update:inventory-item');

            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 1);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 2);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 3);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 4);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 5);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 6);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 7);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 8);
            INSERT INTO public.role_permission (role_id, permission_id)
            VALUES (1, 9);

            INSERT INTO public.user_data (user_uuid, auth0_id, full_name, first_name, last_name, nickname, email, created_at, last_login, is_premium_member, is_deleted)
            VALUES ('e7bd758c-e8bb-45f0-ab4d-e7a331b60729','auth0|65fe478e4e87f7a8c0a6684a', 'Carl Ryckeley', 'Carl', 'Ryckeley','Carl The Great', 'bm-app@carlthegreat.com', NOW(), NOW(), False, False);

            INSERT INTO public.business (business_uuid, business_owner_uuid, business_fullname, business_display_name, business_structure_type_id, country_code, business_industry, is_deleted)
			VALUES ('b492be78-9a2f-4899-b516-79963418b985', 'e7bd758c-e8bb-45f0-ab4d-e7a331b60729', 'Carl Ryckeley Repairs', 'CR Repairs', 6, 'US', 'Electronic and Computer Repair', False);

            INSERT INTO public.user_business (user_id, business_id)
            VALUES (1, 1);

            INSERT INTO public.role (role_name)
            VALUES ('owner');

            INSERT INTO public.user_role (user_id, role_id)
            VALUES (1, 1);
			
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Sole proprietorship');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Partnership');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Corporation');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('S corporation');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Limited liability company');
			INSERT INTO business_structure_type (bst_name)
			VALUES ('Not listed');
        </sql>
    </changeSet>

    <changeSet id="2" author="Carl" context="#19">
        <comment>Create history tables and audit triggers</comment>
            <sqlFile dbms="postgresql"
            encoding="UTF-8"
            path="audit.sql"
            relativeToChangelogFile="true"
            splitStatements="true"
            stripComments="true"
            />
        <sql>
            SELECT audit.audit_table('user_data');
            SELECT audit.audit_table('business');
        </sql>
    </changeSet>

    <changeSet id="3" author="Carl" context="#19">
        <sqlFile dbms="postgresql"
            encoding="UTF-8"
            path="versioning_function.sql"
            relativeToChangelogFile="true"
            splitStatements="true"
            stripComments="true"
            />
        <sql>
            CREATE TABLE audit.business_history (LIKE public.business);
            CREATE TABLE audit.business_inventory_item_history (LIKE public.business_inventory_item);
            CREATE TABLE audit.inventory_item_history (LIKE public.inventory_item);
            CREATE TABLE audit.user_data_history (LIKE public.user_data);
            CREATE TABLE audit.user_business_history (LIKE public.user_business);
            CREATE TABLE audit.user_role_history (LIKE public.user_role);

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.business
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.business_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.business_inventory_item
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.business_inventory_item_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.inventory_item
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.inventory_item_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.user_data
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.user_data_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.user_business
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.user_business_history', true
            );

            CREATE TRIGGER versioning_trigger
            BEFORE INSERT OR UPDATE OR DELETE ON public.user_role
            FOR EACH ROW EXECUTE PROCEDURE versioning(
            'sys_period', 'audit.user_role_history', true
            );
        </sql>
    </changeSet>
</databaseChangeLog>
